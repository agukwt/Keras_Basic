Cul.03のテーマ
「CNNでのモデリンリングに習熟する。ファインチューニングを含む」

fine_turning_with_inceptionV3
fine_turning_with_inceptionV3_generater


ステップ1：  as minist_cnn_simple
    Cul.02の成果物を用い、プログラムソースをメインとMVCモデルに分割せよ。

ステップ2：  as cifar10_simple
    P.86のモデリングを実装せよ。

ステップ3：  as cifar10_deep
    P89の深いネットワークモデルによってネットワークを学習せよ。

ステップ4：  as cifar10_deepcifar10_deep_with_agu
    P91のデータ増幅を行い、fit_generatorを実装せよ。

ステップ4：  as cifar10_deepcifar10_deep_with_agu
    P91のデータ増幅を行い、fit_generatorを実装せよ。

ステップ5：  as vgg16
    公開された学習後モデル(vgg)を利用し、写真判別を実装せよ。

ステップ6：  as fine_turning_with_inceptionV3
    as def transfer_learning
    公開された学習後モデル(inception V3)を利用し、
    学習後モデルでの学習データとは異なるデータ(cifar10)での学習(転移学習)を実装せよ。

    as def fine_turning
    転移学習後のモデルに対し、モデル上位層(255＋)の重みを更新する学習(ファインチューニング)を実装せよ。
    ただし、ファインチューニング時のトレイン/テストデータ数は、個々のHW限界数で与えてよい。
    (※‥トレインデータ数,テストデータ数は、それぞれ上限を60,000および10,000とできるが、
    　　　データ増幅も加味して実装すると、MemoryErrorとなるため。)

ステップ7：  as fine_turning_with_inceptionV3_generator
    ステップ6の実装にたいし、fit_generatorを活用し、
    ファインチューニング時のトレイン/テストデータ数をそれぞれ60,000および10,000で与え、実装せよ。

    整理： cifar10のデータセットを転移学習の入力層(inception V3)形式への変更手順(メモリ性能考慮せず)
        1,  cifar10のデータセットをロード
        2,  cifar10.X_train に対し、(32, 32, 3)　を  (190, 190, 3) に拡大、リサイズ(139+が要件)し、更新
        3,  cifar10.X_test に対し、(32, 32, 3)　を  (190, 190, 3) に拡大、リサイズ(139+が要件)し、更新
        4,  cifar10.Y_train に対し、(1)　を  (10) にカテゴリ化し、更新
        5,  cifar10.Y_test に対し、(1)　を  (10) にカテゴリ化し、更新
        6,  cifar10.X_train に対し、正規化を行ったテンソルをfloat32に型変換し、更新
        7,  cifar10.X_test に対し、正規化を行ったテンソルをfloat32に型変換し、更新










    【実施事項】
    □:   TensorBoard, ModelCheckpoint, EarlyStoppingを関数としての分離
    □:   model path でのexist証明
    □:   fit_generator
    □:   check modelのベストプラクティス






